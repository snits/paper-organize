[project]
name = "paper-organize"
version = "1.0.1"
description = "Command-line utility for organizing academic papers with intelligent metadata extraction and descriptive filenames"
readme = "README.md"
license = {text = "MIT"}
authors = [
    { name = "Jerry Snitselaar", email = "dev@snitselaar.org" }
]
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering",
    "Topic :: Utilities",
]
keywords = ["academic", "papers", "pdf", "arxiv", "research", "cli", "organize", "metadata"]
dependencies = [
    "click>=8.0.0",
    "requests>=2.25.0",
    "pypdf>=4.0.0",
    "tqdm>=4.60.0",
    # MIT-licensed replacements for pdf2doi
    "pdfplumber>=0.9.0",  # Enhanced PDF text extraction
    "arxiv>=2.1.0",       # Official arXiv API client
]

[project.scripts]
paper-organize = "paperorganize.cli:main"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"

[tool.ruff]
line-length = 88
target-version = "py38"

[tool.ruff.lint]
select = ["E", "F", "W", "C90", "I", "N", "UP", "B", "A", "C4", "DTZ", "T10", "EM", "G", "PIE", "T20", "Q", "RSE", "RET", "SIM", "TID", "TCH", "ARG", "PTH", "FBT", "TD", "FIX", "ERA", "PL", "TRY", "FLY", "NPY", "PERF", "FURB", "LOG", "RUF"]
ignore = [
    "E501", "PLR0913", "PLR0912", "PLR0915", "TD003", "FIX002",
    # Exception formatting - our ValidationError pattern with rich details is intentional
    "TRY003",  # Allow long exception messages for better UX
    "EM102",   # Allow f-strings in exceptions for clarity
    "TRY300",  # Allow return after if without else - common Python pattern
]

[tool.ruff.lint.per-file-ignores]
"src/paperorganize/metadata_extraction/*" = [
    "PLC0415",  # Local imports for optional dependencies with graceful fallbacks
    "PERF203",  # Exception handling in loops for robust text extraction
]
"tests/*" = [
    "ARG001",   # Unused arguments in test mocks are common and acceptable
    "ARG002",   # Unused method arguments in test fixtures
    "FBT003",   # Boolean positional args in test data/mocks are clear in context
    "PLR2004",  # Magic numbers in tests (2, 3, etc.) are clear and don't need constants
    "PLC0415",  # Local imports in test functions are acceptable for isolation
    "SIM117",   # Nested context managers in tests for clarity over brevity
]
"tests/test_cli.py" = [
    "FBT001",   # Boolean-typed positional argument (specific to this file)
    "FBT002",   # Boolean default positional argument (specific to this file) 
    "TRY003",   # Long exception messages (specific to this file)
]

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[project.optional-dependencies]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
]
dev = [
    "mypy>=1.0.0",
    "ruff>=0.1.0",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
]

[tool.hatch.build.targets.wheel]
packages = ["src/paperorganize"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[dependency-groups]
dev = [
    "bandit>=1.7.10",
    "mypy>=1.14.1",
    "pip-licenses>=4.5.1",
    "pytest>=8.3.5",
    "pytest-cov>=5.0.0",
    "ruff>=0.12.5",
    "types-requests>=2.32.0.20241016",
]
